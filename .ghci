let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c] ) arg ++ "'"
:def! search return . (":! hoogle --color " ++) . ghciEscapeShellArg
let doc p = return $ ":browser "++GHC.Paths.libdir++dropWhile (/='/')GHC.Paths.docdir++relative where { relative | p=="" = "/index.html" | otherwise = p }
:def doc doc
:set -XTypeOperators
let users_guide p = doc ("/users_guide"++if null p then "/index.html" else p)
:def users_guide users_guide
:def ghc_pkg (\l->return $ ":!"++GHC.Paths.ghc_pkg++" "++l)

